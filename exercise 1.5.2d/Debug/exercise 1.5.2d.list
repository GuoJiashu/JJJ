
exercise 1.5.2d.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001cc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000360  08000360  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000360  08000360  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08000360  08000360  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000360  08000360  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000360  08000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000364  08000364  00010364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08000368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          0000001c  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_line   00000128  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000086  00000000  00000000  0002021b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  000202a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  000202e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  00020310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00000087  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  000203df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  000203f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000080 	.word	0x20000080
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000348 	.word	0x08000348

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000084 	.word	0x20000084
 80001d0:	08000348 	.word	0x08000348

080001d4 <enable_peripheral_clocks>:



enable_peripheral_clocks:

	LDR R0, =RCC
 80001d4:	482f      	ldr	r0, [pc, #188]	; (8000294 <end_loop+0x2>)

	LDR R1, [R0, #AHBENR]
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE  @ enable GPIO
 80001d8:	f441 1178 	orr.w	r1, r1, #4063232	; 0x3e0000
	STR R1, [R0, #AHBENR]
 80001dc:	6141      	str	r1, [r0, #20]

	BX LR
 80001de:	4770      	bx	lr

080001e0 <enable_uart>:

enable_uart:

	LDR R0, =GPIOC
 80001e0:	482d      	ldr	r0, [pc, #180]	; (8000298 <end_loop+0x6>)

	LDR R1, =0x77
 80001e2:	f04f 0177 	mov.w	r1, #119	; 0x77
	STRB R1, [R0, AFRL + 2]
 80001e6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22

	LDR R1, [R0, GPIO_MODER]
 80001ea:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00
 80001ec:	f441 6120 	orr.w	r1, r1, #2560	; 0xa00
	STR R1, [R0, GPIO_MODER]
 80001f0:	6001      	str	r1, [r0, #0]

	LDR R1, [R0, GPIO_OSPEEDR]
 80001f2:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00
 80001f4:	f441 6170 	orr.w	r1, r1, #3840	; 0xf00
	STR R1, [R0, GPIO_OSPEEDR]
 80001f8:	6081      	str	r1, [r0, #8]

	LDR R0, =RCC
 80001fa:	4826      	ldr	r0, [pc, #152]	; (8000294 <end_loop+0x2>)
	LDR R1, [R0, #APB2ENR]
 80001fc:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << UART_EN
 80001fe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
	STR R1, [R0, #APB2ENR]
 8000202:	6181      	str	r1, [r0, #24]

	MOV R1, #0x46
 8000204:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =USART1
 8000208:	4824      	ldr	r0, [pc, #144]	; (800029c <end_loop+0xa>)
	STRH R1, [R0, #USART_BRR]
 800020a:	8181      	strh	r1, [r0, #12]

	LDR R0, =USART1
 800020c:	4823      	ldr	r0, [pc, #140]	; (800029c <end_loop+0xa>)
	LDR R1, [R0, #USART_CR1]
 800020e:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE
 8000210:	f041 010d 	orr.w	r1, r1, #13

	STR R1, [R0, #USART_CR1]
 8000214:	6001      	str	r1, [r0, #0]

	BX LR
 8000216:	4770      	bx	lr

08000218 <initialise_power>:

initialise_power:

	LDR R0, =RCC
 8000218:	481e      	ldr	r0, [pc, #120]	; (8000294 <end_loop+0x2>)

	LDR R1, [R0, #APB1ENR]
 800021a:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN
 800021c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
	STR R1, [R0, #APB1ENR]
 8000220:	61c1      	str	r1, [r0, #28]

	LDR R1, [R0, #APB2ENR]
 8000222:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN
 8000224:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 8000228:	6181      	str	r1, [r0, #24]

	BX LR
 800022a:	4770      	bx	lr

0800022c <main>:

.text

main:
    // Initialize power, peripheral clocks, and UART
    BL initialise_power
 800022c:	f7ff fff4 	bl	8000218 <initialise_power>
    BL enable_peripheral_clocks
 8000230:	f7ff ffd0 	bl	80001d4 <enable_peripheral_clocks>
    BL enable_uart
 8000234:	f7ff ffd4 	bl	80001e0 <enable_uart>

    // Load addresses of incoming_buffer and incoming_counter
    LDR R6, =incoming_buffer
 8000238:	4e19      	ldr	r6, [pc, #100]	; (80002a0 <end_loop+0xe>)
    LDR R7, =incoming_counter
 800023a:	4f1a      	ldr	r7, [pc, #104]	; (80002a4 <end_loop+0x12>)

    // Load the value from incoming_counter into R7
    LDRB R7, [R7]
 800023c:	783f      	ldrb	r7, [r7, #0]

    // Initialize index counter R8
    MOV R8, #0x00
 800023e:	f04f 0800 	mov.w	r8, #0

	LDR R0, =USART1
 8000242:	4816      	ldr	r0, [pc, #88]	; (800029c <end_loop+0xa>)
	LDR R4, =terminating_char
 8000244:	4c18      	ldr	r4, [pc, #96]	; (80002a8 <end_loop+0x16>)
	LDRB R4,[R4]
 8000246:	7824      	ldrb	r4, [r4, #0]
    // Call the function to read and retransmit
    BL receive_loop
 8000248:	f000 f800 	bl	800024c <receive_loop>

0800024c <receive_loop>:
receive_loop:

	// Load the base address of USART1 into R0

    // Load the UART ISR register into R1
    LDR R1, [R0, USART_ISR]
 800024c:	69c1      	ldr	r1, [r0, #28]

    // Check for UART errors: overrun error or framing error
    TST R1, 1 << UART_ORE | 1 << UART_FE
 800024e:	f011 0f0a 	tst.w	r1, #10

    // If error flags are set, clear them and continue loop
    BNE clear_error
 8000252:	d10a      	bne.n	800026a <clear_error>

    // Check if UART has received data
    TST R1, 1 << UART_RXNE
 8000254:	f011 0f20 	tst.w	r1, #32

    // If no data is received, continue loop
    BEQ receive_loop
 8000258:	d0f8      	beq.n	800024c <receive_loop>

    // Read the received character from USART_RDR into R3
    LDRB R3, [R0, USART_RDR]
 800025a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24

    // Store the received character into the incoming_buffer
    STRB R3, [R6, R8]
 800025e:	f806 3008 	strb.w	r3, [r6, r8]

    // Increment index counter R8
    ADD R8, #1
 8000262:	f108 0801 	add.w	r8, r8, #1
    // Check if the index counter R8 exceeds the buffer size

    // If index counter exceeds buffer size, reset index counter R8

    // Check if the received character matches the terminating_char
    CMP R3, R4
 8000266:	42a3      	cmp	r3, r4

    // If received character matches terminating_char, exit loop
    BEQ transmit_string
 8000268:	d004      	beq.n	8000274 <transmit_string>

0800026a <clear_error>:
clear_error:
    LDR R1, [R0, USART_ICR]
 800026a:	6a01      	ldr	r1, [r0, #32]
    ORR R1, 1 << UART_ORECF | 1 << UART_FECF
 800026c:	f041 0108 	orr.w	r1, r1, #8
    STR R1, [R0, USART_ICR]
 8000270:	6201      	str	r1, [r0, #32]
    B receive_loop
 8000272:	e7eb      	b.n	800024c <receive_loop>

08000274 <transmit_string>:

transmit_string:
    // Load the base address of USART1 into R0
    BL enable_uart
 8000274:	f7ff ffb4 	bl	80001e0 <enable_uart>
    LDR R0, =USART1
 8000278:	4808      	ldr	r0, [pc, #32]	; (800029c <end_loop+0xa>)

0800027a <transmit_loop>:
    // Load the address of incoming_buffer into R2
    //LDR R2, =incoming_buffer*/
    // Function to transmit the string stored in tx_string via UART
transmit_loop:
    // Load the UART ISR register into R1
    LDR R1, [R0, USART_ISR]
 800027a:	69c1      	ldr	r1, [r0, #28]

    // Check if UART transmitter is empty
    TST R1, 1 << UART_TXE
 800027c:	f011 0f80 	tst.w	r1, #128	; 0x80
    BEQ transmit_loop
 8000280:	d0fb      	beq.n	800027a <transmit_loop>

    // Load byte from tx_string into R5 and increment pointer
    LDRB R5, [R6], #1
 8000282:	f816 5b01 	ldrb.w	r5, [r6], #1

    // Store byte into UART transmit data register
    STRB R5, [R0, USART_TDR]
 8000286:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28

    // Compare current character with end character
    CMP R5, R4
 800028a:	42a5      	cmp	r5, r4

    // Continue transmission if length counter is not zero
    BNE transmit_loop
 800028c:	d1f5      	bne.n	800027a <transmit_loop>

	B end_loop
 800028e:	e000      	b.n	8000292 <end_loop>
    BX LR
 8000290:	4770      	bx	lr

08000292 <end_loop>:

end_loop:
	B end_loop
 8000292:	e7fe      	b.n	8000292 <end_loop>
	LDR R0, =RCC
 8000294:	40021000 	.word	0x40021000
	LDR R0, =GPIOC
 8000298:	48000800 	.word	0x48000800
	LDR R0, =USART1
 800029c:	40013800 	.word	0x40013800
    LDR R6, =incoming_buffer
 80002a0:	20000000 	.word	0x20000000
    LDR R7, =incoming_counter
 80002a4:	2000003e 	.word	0x2000003e
	LDR R4, =terminating_char
 80002a8:	2000003f 	.word	0x2000003f

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 f811 	bl	8000300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ffa5 	bl	800022c <main>

080002e2 <LoopForever>:

LoopForever:
  b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80002f0:	08000368 	.word	0x08000368
  ldr r2, =_sbss
 80002f4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80002f8:	2000009c 	.word	0x2000009c

080002fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC1_2_IRQHandler>
	...

08000300 <__libc_init_array>:
 8000300:	b570      	push	{r4, r5, r6, lr}
 8000302:	4d0d      	ldr	r5, [pc, #52]	; (8000338 <__libc_init_array+0x38>)
 8000304:	4c0d      	ldr	r4, [pc, #52]	; (800033c <__libc_init_array+0x3c>)
 8000306:	1b64      	subs	r4, r4, r5
 8000308:	10a4      	asrs	r4, r4, #2
 800030a:	2600      	movs	r6, #0
 800030c:	42a6      	cmp	r6, r4
 800030e:	d109      	bne.n	8000324 <__libc_init_array+0x24>
 8000310:	4d0b      	ldr	r5, [pc, #44]	; (8000340 <__libc_init_array+0x40>)
 8000312:	4c0c      	ldr	r4, [pc, #48]	; (8000344 <__libc_init_array+0x44>)
 8000314:	f000 f818 	bl	8000348 <_init>
 8000318:	1b64      	subs	r4, r4, r5
 800031a:	10a4      	asrs	r4, r4, #2
 800031c:	2600      	movs	r6, #0
 800031e:	42a6      	cmp	r6, r4
 8000320:	d105      	bne.n	800032e <__libc_init_array+0x2e>
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f855 3b04 	ldr.w	r3, [r5], #4
 8000328:	4798      	blx	r3
 800032a:	3601      	adds	r6, #1
 800032c:	e7ee      	b.n	800030c <__libc_init_array+0xc>
 800032e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000332:	4798      	blx	r3
 8000334:	3601      	adds	r6, #1
 8000336:	e7f2      	b.n	800031e <__libc_init_array+0x1e>
 8000338:	08000360 	.word	0x08000360
 800033c:	08000360 	.word	0x08000360
 8000340:	08000360 	.word	0x08000360
 8000344:	08000364 	.word	0x08000364

08000348 <_init>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr

08000354 <_fini>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr
