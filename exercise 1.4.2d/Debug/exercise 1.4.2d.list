
exercise 1.4.2d.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800033c  0800033c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800033c  0800033c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800033c  0800033c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800033c  0800033c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800033c  0800033c  0001033c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000340  08000340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000344  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0000001c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_line   00000111  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000086  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  00020266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  00020290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00000087  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  0002035f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  00020378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000324 	.word	0x08000324

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08000324 	.word	0x08000324

080001d4 <enable_peripheral_clocks>:
#include "definitions.s"


@ enable the clocks for peripherals (GPIOA, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	4829      	ldr	r0, [pc, #164]	; (800027c <end_loop+0x4>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE  @ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f441 1128 	orr.w	r1, r1, #2752512	; 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 80001dc:	6141      	str	r1, [r0, #20]
	BX LR @ return from function call
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:



@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e0:	4827      	ldr	r0, [pc, #156]	; (8000280 <end_loop+0x8>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001e2:	f245 5155 	movw	r1, #21845	; 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001e6:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001e8:	4770      	bx	lr

080001ea <main>:



main:

    BL enable_peripheral_clocks   @ Call function to enable peripheral clocks
 80001ea:	f7ff fff3 	bl	80001d4 <enable_peripheral_clocks>

    BL initialise_discovery_board  @ Call function to initialize the discovery board
 80001ee:	f7ff fff7 	bl	80001e0 <initialise_discovery_board>

    LDR R0, =#GPIOE    @ Load address of GPIOE into R0
 80001f2:	4823      	ldr	r0, [pc, #140]	; (8000280 <end_loop+0x8>)
    LDR R1, =#GPIOA    @ Load address of GPIOA into R1
 80001f4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
    LDR R2, =input_string   @ Load address of input string into R2
 80001f8:	4a22      	ldr	r2, [pc, #136]	; (8000284 <end_loop+0xc>)
    LDR R3, =#0     @ Load initial offset for string into R3
 80001fa:	f04f 0300 	mov.w	r3, #0
    LDRB R4, =#0    @ Load initial count for capital letters into R4
 80001fe:	f04f 0400 	mov.w	r4, #0

    LDR R5, =#0x41   @ Load ASCII value for 'A' into R5
 8000202:	f04f 0541 	mov.w	r5, #65	; 0x41

    B count     @ Branch to count subroutine
 8000206:	e7ff      	b.n	8000208 <count>

08000208 <count>:

count:

    CMP R5, #0x5A   @ Compare current letter with 'Z'
 8000208:	2d5a      	cmp	r5, #90	; 0x5a
    BEQ end_loop    @ If current letter is 'Z', end loop
 800020a:	d035      	beq.n	8000278 <end_loop>
    LDRB R6, [R2, R3]   @ Load byte from input string at offset R3 into R6
 800020c:	5cd6      	ldrb	r6, [r2, r3]

    CMP R6, #0      @ Check if end of string is reached
 800020e:	2e00      	cmp	r6, #0
    BEQ button_pressed   @ If end of string is reached, jump to button_pressed
 8000210:	d01a      	beq.n	8000248 <button_pressed>

    CMP R6, R5      @ Compare current character with current capital letter
 8000212:	42ae      	cmp	r6, r5
    BEQ capital_letter_found   @ If current character matches current capital letter, jump to capital_letter_found
 8000214:	d008      	beq.n	8000228 <capital_letter_found>

    ADD R5, #0x20   @ Convert current capital letter to lowercase
 8000216:	f105 0520 	add.w	r5, r5, #32
    CMP R6, R5      @ Compare current character with lowercase version of current letter
 800021a:	42ae      	cmp	r6, r5
    BEQ lower_letter_found    @ If current character matches lowercase version of current letter, jump to lower_letter_found
 800021c:	d00b      	beq.n	8000236 <lower_letter_found>
    SUB R5, #0x20   @ Restore original value of R5 (capital letter)
 800021e:	f1a5 0520 	sub.w	r5, r5, #32

    ADD R3, #1      @ Increment offset for input string
 8000222:	f103 0301 	add.w	r3, r3, #1

    B count     @ Branch back to count subroutine
 8000226:	e7ef      	b.n	8000208 <count>

08000228 <capital_letter_found>:

capital_letter_found:

    MOV R4, R4, LSL 1   @ Shift left R4 by 1 bit, effectively multiplying by 2
 8000228:	ea4f 0444 	mov.w	r4, r4, lsl #1
    ADD R4, #1      @ Increment count of capital letters
 800022c:	f104 0401 	add.w	r4, r4, #1
    ADD R3, #1      @ Increment offset for input string
 8000230:	f103 0301 	add.w	r3, r3, #1

    B count     @ Branch back to count subroutine
 8000234:	e7e8      	b.n	8000208 <count>

08000236 <lower_letter_found>:

lower_letter_found:

    MOV R4, R4, LSL 1   @ Shift left R4 by 1 bit, effectively multiplying by 2
 8000236:	ea4f 0444 	mov.w	r4, r4, lsl #1
    ADD R4, #1      @ Increment count of capital letters
 800023a:	f104 0401 	add.w	r4, r4, #1
    ADD R3, #1      @ Increment offset for input string
 800023e:	f103 0301 	add.w	r3, r3, #1
    SUB R5, #0x20   @ Restore original value of R5 (capital letter)
 8000242:	f1a5 0520 	sub.w	r5, r5, #32

    B count     @ Branch back to count subroutine
 8000246:	e7df      	b.n	8000208 <count>

08000248 <button_pressed>:

button_pressed:

    LDR R7, [R1, #IDR]   @ Load GPIOA IDR register into R7
 8000248:	690f      	ldr	r7, [r1, #16]
    TST R7, 1 << 0x00    @ Test bit 0 of IDR register
 800024a:	f017 0f01 	tst.w	r7, #1
    BEQ button_pressed   @ If bit 0 is not set, continue looping until it is set
 800024e:	d0fb      	beq.n	8000248 <button_pressed>

    B led   @ If button is pressed, jump to led subroutine
 8000250:	e7ff      	b.n	8000252 <led>

08000252 <led>:

led:

    STRB R4, [R0, #ODR +1]    @ Store R4 value to GPIOE ODR register at bit 1
 8000252:	7544      	strb	r4, [r0, #21]

    BL delay    @ Call delay subroutine
 8000254:	f000 f805 	bl	8000262 <delay>

    ADD R5, #1      @ Increment to the next letter ASCII value
 8000258:	f105 0501 	add.w	r5, r5, #1

    BL reset   @ Call reset subroutine
 800025c:	f000 f807 	bl	800026e <reset>

    B count     @ Branch back to count subroutine
 8000260:	e7d2      	b.n	8000208 <count>

08000262 <delay>:

delay:
    MOV R8, #0x00100000    @ Load delay value into R8
 8000262:	f44f 1880 	mov.w	r8, #1048576	; 0x100000

08000266 <led_not_finish>:

led_not_finish:

    SUBS R8, #0x01     @ Decrement delay counter
 8000266:	f1b8 0801 	subs.w	r8, r8, #1
    BNE led_not_finish    @ Loop until delay counter reaches 0
 800026a:	d1fc      	bne.n	8000266 <led_not_finish>

    BX LR   @ Return from subroutine
 800026c:	4770      	bx	lr

0800026e <reset>:

reset:
    LDR R3, =#0     @ Reset offset for input string
 800026e:	f04f 0300 	mov.w	r3, #0
    LDRB R4, =#0    @ Reset count of capital letters
 8000272:	f04f 0400 	mov.w	r4, #0

    BX LR   @ Return from subroutine
 8000276:	4770      	bx	lr

08000278 <end_loop>:

end_loop:
    B end_loop    @ Infinite loop to end the main program
 8000278:	e7fe      	b.n	8000278 <end_loop>
 800027a:	0000      	.short	0x0000
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 800027c:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 8000280:	48001000 	.word	0x48001000
    LDR R2, =input_string   @ Load address of input string into R2
 8000284:	20000000 	.word	0x20000000

08000288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000288:	480d      	ldr	r0, [pc, #52]	; (80002c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800028c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490d      	ldr	r1, [pc, #52]	; (80002c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0d      	ldr	r2, [pc, #52]	; (80002cc <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0a      	ldr	r4, [pc, #40]	; (80002d4 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b6:	f000 f811 	bl	80002dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ba:	f7ff ff96 	bl	80001ea <main>

080002be <LoopForever>:

LoopForever:
  b LoopForever
 80002be:	e7fe      	b.n	80002be <LoopForever>
  ldr   r0, =_estack
 80002c0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80002cc:	08000344 	.word	0x08000344
  ldr r2, =_sbss
 80002d0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80002d4:	20000030 	.word	0x20000030

080002d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d8:	e7fe      	b.n	80002d8 <ADC1_2_IRQHandler>
	...

080002dc <__libc_init_array>:
 80002dc:	b570      	push	{r4, r5, r6, lr}
 80002de:	4d0d      	ldr	r5, [pc, #52]	; (8000314 <__libc_init_array+0x38>)
 80002e0:	4c0d      	ldr	r4, [pc, #52]	; (8000318 <__libc_init_array+0x3c>)
 80002e2:	1b64      	subs	r4, r4, r5
 80002e4:	10a4      	asrs	r4, r4, #2
 80002e6:	2600      	movs	r6, #0
 80002e8:	42a6      	cmp	r6, r4
 80002ea:	d109      	bne.n	8000300 <__libc_init_array+0x24>
 80002ec:	4d0b      	ldr	r5, [pc, #44]	; (800031c <__libc_init_array+0x40>)
 80002ee:	4c0c      	ldr	r4, [pc, #48]	; (8000320 <__libc_init_array+0x44>)
 80002f0:	f000 f818 	bl	8000324 <_init>
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	10a4      	asrs	r4, r4, #2
 80002f8:	2600      	movs	r6, #0
 80002fa:	42a6      	cmp	r6, r4
 80002fc:	d105      	bne.n	800030a <__libc_init_array+0x2e>
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	f855 3b04 	ldr.w	r3, [r5], #4
 8000304:	4798      	blx	r3
 8000306:	3601      	adds	r6, #1
 8000308:	e7ee      	b.n	80002e8 <__libc_init_array+0xc>
 800030a:	f855 3b04 	ldr.w	r3, [r5], #4
 800030e:	4798      	blx	r3
 8000310:	3601      	adds	r6, #1
 8000312:	e7f2      	b.n	80002fa <__libc_init_array+0x1e>
 8000314:	0800033c 	.word	0x0800033c
 8000318:	0800033c 	.word	0x0800033c
 800031c:	0800033c 	.word	0x0800033c
 8000320:	08000340 	.word	0x08000340

08000324 <_init>:
 8000324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000326:	bf00      	nop
 8000328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032a:	bc08      	pop	{r3}
 800032c:	469e      	mov	lr, r3
 800032e:	4770      	bx	lr

08000330 <_fini>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	bf00      	nop
 8000334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000336:	bc08      	pop	{r3}
 8000338:	469e      	mov	lr, r3
 800033a:	4770      	bx	lr
