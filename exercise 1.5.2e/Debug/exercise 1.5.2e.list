
exercise 1.5.2e.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001ec  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000380  08000380  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000380  08000380  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000380  08000380  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000380  08000380  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000380  08000380  00010380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000384  08000384  00010384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000001c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_line   00000139  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 0000007f  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  00020237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  0002027f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  000202a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00000083  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  00020373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  0002038c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000368 	.word	0x08000368

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08000368 	.word	0x08000368

080001d4 <enable_peripheral_clocks>:



enable_peripheral_clocks:

	LDR R0, =RCC
 80001d4:	4834      	ldr	r0, [pc, #208]	; (80002a8 <confirmation+0x6>)

	LDR R1, [R0, #AHBENR]
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE  @ enable GPIO
 80001d8:	f441 1178 	orr.w	r1, r1, #4063232	; 0x3e0000
	STR R1, [R0, #AHBENR]
 80001dc:	6141      	str	r1, [r0, #20]

	BX LR
 80001de:	4770      	bx	lr

080001e0 <enable_usart1>:

enable_usart1:

	LDR R0, =GPIOC
 80001e0:	4832      	ldr	r0, [pc, #200]	; (80002ac <confirmation+0xa>)

	LDR R1, =0x77
 80001e2:	f04f 0177 	mov.w	r1, #119	; 0x77
	STRB R1, [R0, AFRL + 2]
 80001e6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22

	LDR R1, [R0, GPIO_MODER]
 80001ea:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00
 80001ec:	f441 6120 	orr.w	r1, r1, #2560	; 0xa00
	STR R1, [R0, GPIO_MODER]
 80001f0:	6001      	str	r1, [r0, #0]

	LDR R1, [R0, GPIO_OSPEEDR]
 80001f2:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00
 80001f4:	f441 6170 	orr.w	r1, r1, #3840	; 0xf00
	STR R1, [R0, GPIO_OSPEEDR]
 80001f8:	6081      	str	r1, [r0, #8]

	LDR R0, =RCC
 80001fa:	482b      	ldr	r0, [pc, #172]	; (80002a8 <confirmation+0x6>)
	LDR R1, [R0, #APB2ENR]
 80001fc:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << USART1_EN
 80001fe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
	STR R1, [R0, #APB2ENR]
 8000202:	6181      	str	r1, [r0, #24]

	MOV R1, #0x46
 8000204:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =USART1
 8000208:	4829      	ldr	r0, [pc, #164]	; (80002b0 <confirmation+0xe>)
	STRH R1, [R0, #USART_BRR]
 800020a:	8181      	strh	r1, [r0, #12]

	LDR R0, =USART1
 800020c:	4828      	ldr	r0, [pc, #160]	; (80002b0 <confirmation+0xe>)
	LDR R1, [R0, #USART_CR1]
 800020e:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE
 8000210:	f041 010d 	orr.w	r1, r1, #13

	STR R1, [R0, #USART_CR1]
 8000214:	6001      	str	r1, [r0, #0]

	BX LR
 8000216:	4770      	bx	lr

08000218 <enable_uart4>:

enable_uart4:

	LDR R0, =GPIOC
 8000218:	4824      	ldr	r0, [pc, #144]	; (80002ac <confirmation+0xa>)

	LDR R1, =0x55
 800021a:	f04f 0155 	mov.w	r1, #85	; 0x55
	STRB R1, [R0, AFRH + 1]
 800021e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25

	LDR R1, =0x00A00A00
 8000222:	4924      	ldr	r1, [pc, #144]	; (80002b4 <confirmation+0x12>)
	STR R1, [R0, GPIO_MODER]
 8000224:	6001      	str	r1, [r0, #0]

	LDR R1, =0x00F00F00
 8000226:	4924      	ldr	r1, [pc, #144]	; (80002b8 <confirmation+0x16>)
	STR R1, [R0, GPIO_OSPEEDR]
 8000228:	6081      	str	r1, [r0, #8]

	LDR R0, =RCC
 800022a:	481f      	ldr	r0, [pc, #124]	; (80002a8 <confirmation+0x6>)
	LDR R1, [R0, #APB1ENR]
 800022c:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << UART4_EN
 800022e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
	STR R1, [R0, #APB1ENR]
 8000232:	61c1      	str	r1, [r0, #28]

	MOV R1, #0x46
 8000234:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =UART4
 8000238:	4820      	ldr	r0, [pc, #128]	; (80002bc <confirmation+0x1a>)
	STRH R1, [R0, #USART_BRR]
 800023a:	8181      	strh	r1, [r0, #12]

	LDR R0, =UART4
 800023c:	481f      	ldr	r0, [pc, #124]	; (80002bc <confirmation+0x1a>)
	LDR R1, [R0, #USART_CR1]
 800023e:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE
 8000240:	f041 010d 	orr.w	r1, r1, #13

	STR R1, [R0, #USART_CR1]
 8000244:	6001      	str	r1, [r0, #0]

	BX LR
 8000246:	4770      	bx	lr

08000248 <initialise_power>:

initialise_power:

	LDR R0, =RCC
 8000248:	4817      	ldr	r0, [pc, #92]	; (80002a8 <confirmation+0x6>)

	LDR R1, [R0, #APB1ENR]
 800024a:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN
 800024c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
	STR R1, [R0, #APB1ENR]
 8000250:	61c1      	str	r1, [r0, #28]

	LDR R1, [R0, #APB2ENR]
 8000252:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN
 8000254:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 8000258:	6181      	str	r1, [r0, #24]

	BX LR
 800025a:	4770      	bx	lr

0800025c <main>:
@ define text


main:

	BL initialise_power          @ Call function to initialise power
 800025c:	f7ff fff4 	bl	8000248 <initialise_power>
	BL enable_peripheral_clocks  @ Call function to enable peripheral clocks
 8000260:	f7ff ffb8 	bl	80001d4 <enable_peripheral_clocks>
	BL enable_uart4               @ Call function to enable UART
 8000264:	f7ff ffd8 	bl	8000218 <enable_uart4>

	B tx_loop               @ Branch to program loop
 8000268:	e7ff      	b.n	800026a <tx_loop>

0800026a <tx_loop>:

tx_loop:

	LDR R0, =UART4     	@ Load address of USART1 into R0
 800026a:	4814      	ldr	r0, [pc, #80]	; (80002bc <confirmation+0x1a>)

	LDR R1, =tx_string  	@ Load address of tx_string into R1
 800026c:	4914      	ldr	r1, [pc, #80]	; (80002c0 <confirmation+0x1e>)
	LDR R3, =tx_length  	@ Load address of tx_length into R3
 800026e:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <confirmation+0x22>)

	LDR R4, [R3]        	@ Load value from memory address stored in R3 into R4
 8000270:	681c      	ldr	r4, [r3, #0]

08000272 <tx_uart>:


tx_uart:

	LDR R2, [R0, USART_ISR]   	@ Load USART ISR register into R2
 8000272:	69c2      	ldr	r2, [r0, #28]
	ANDS R2, 1 << UART_TXE    	@ Perform bitwise AND operation to check UART_TXE flag
 8000274:	f012 0280 	ands.w	r2, r2, #128	; 0x80

	BEQ tx_uart               	@ Branch back to tx_uart if UART_TXE flag is not set
 8000278:	d0fb      	beq.n	8000272 <tx_uart>

	LDRB R5, [R1], #1         	@ Load byte from memory address pointed to by R1 into R5 and increment R1
 800027a:	f811 5b01 	ldrb.w	r5, [r1], #1
	STRB R5, [R0, USART_TDR]  	@ Store byte from R5 into USART transmit data register
 800027e:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28

	BL confirmation
 8000282:	f000 f80e 	bl	80002a2 <confirmation>

	SUBS R4, #1          		@ Subtract 1 from R4 (tx_length)
 8000286:	3c01      	subs	r4, #1

	                     		@ Compare R5 with ASCII code for '?'
	CMP R5, #'a'
 8000288:	2d61      	cmp	r5, #97	; 0x61
	BEQ end_transmission 		@ Branch to end_transmission if equal
 800028a:	d003      	beq.n	8000294 <end_transmission>

	BGT tx_uart          		@ Branch to tx_uart if R5 is greater than '?'
 800028c:	dcf1      	bgt.n	8000272 <tx_uart>

	BL delay_loop        		@ Call delay_loop subroutine
 800028e:	f000 f802 	bl	8000296 <delay_loop>

	B tx_loop            		@ Branch back to tx_loop
 8000292:	e7ea      	b.n	800026a <tx_loop>

08000294 <end_transmission>:


end_transmission:

	B end_transmission
 8000294:	e7fe      	b.n	8000294 <end_transmission>

08000296 <delay_loop>:

delay_loop:
	LDR R9, =0xfffff     @ Load maximum delay value into R9
 8000296:	f8df 9030 	ldr.w	r9, [pc, #48]	; 80002c8 <confirmation+0x26>

0800029a <delay_inner>:

delay_inner:

	SUBS R9, #1          @subtract 1 from R9
 800029a:	f1b9 0901 	subs.w	r9, r9, #1
	BGT delay_inner      @ Branch back to delay_inner if R9 is greater than 1
 800029e:	dcfc      	bgt.n	800029a <delay_inner>
	BX LR                @ Return from subroutine
 80002a0:	4770      	bx	lr

080002a2 <confirmation>:

confirmation:

	MOV R10, #1
 80002a2:	f04f 0a01 	mov.w	sl, #1
	BX LR
 80002a6:	4770      	bx	lr
	LDR R0, =RCC
 80002a8:	40021000 	.word	0x40021000
	LDR R0, =GPIOC
 80002ac:	48000800 	.word	0x48000800
	LDR R0, =USART1
 80002b0:	40013800 	.word	0x40013800
	LDR R1, =0x00A00A00
 80002b4:	00a00a00 	.word	0x00a00a00
	LDR R1, =0x00F00F00
 80002b8:	00f00f00 	.word	0x00f00f00
	LDR R0, =UART4
 80002bc:	40004c00 	.word	0x40004c00
	LDR R1, =tx_string  	@ Load address of tx_string into R1
 80002c0:	20000000 	.word	0x20000000
	LDR R3, =tx_length  	@ Load address of tx_length into R3
 80002c4:	20000009 	.word	0x20000009
	LDR R9, =0xfffff     @ Load maximum delay value into R9
 80002c8:	000fffff 	.word	0x000fffff

080002cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002cc:	480d      	ldr	r0, [pc, #52]	; (8000304 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d4:	480c      	ldr	r0, [pc, #48]	; (8000308 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d6:	490d      	ldr	r1, [pc, #52]	; (800030c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d8:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <LoopForever+0xe>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002dc:	e002      	b.n	80002e4 <LoopCopyDataInit>

080002de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e2:	3304      	adds	r3, #4

080002e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e8:	d3f9      	bcc.n	80002de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ea:	4a0a      	ldr	r2, [pc, #40]	; (8000314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ec:	4c0a      	ldr	r4, [pc, #40]	; (8000318 <LoopForever+0x16>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f0:	e001      	b.n	80002f6 <LoopFillZerobss>

080002f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f4:	3204      	adds	r2, #4

080002f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f8:	d3fb      	bcc.n	80002f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fa:	f000 f811 	bl	8000320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fe:	f7ff ffad 	bl	800025c <main>

08000302 <LoopForever>:

LoopForever:
  b LoopForever
 8000302:	e7fe      	b.n	8000302 <LoopForever>
  ldr   r0, =_estack
 8000304:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800030c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000310:	08000388 	.word	0x08000388
  ldr r2, =_sbss
 8000314:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000318:	20000028 	.word	0x20000028

0800031c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800031c:	e7fe      	b.n	800031c <ADC1_2_IRQHandler>
	...

08000320 <__libc_init_array>:
 8000320:	b570      	push	{r4, r5, r6, lr}
 8000322:	4d0d      	ldr	r5, [pc, #52]	; (8000358 <__libc_init_array+0x38>)
 8000324:	4c0d      	ldr	r4, [pc, #52]	; (800035c <__libc_init_array+0x3c>)
 8000326:	1b64      	subs	r4, r4, r5
 8000328:	10a4      	asrs	r4, r4, #2
 800032a:	2600      	movs	r6, #0
 800032c:	42a6      	cmp	r6, r4
 800032e:	d109      	bne.n	8000344 <__libc_init_array+0x24>
 8000330:	4d0b      	ldr	r5, [pc, #44]	; (8000360 <__libc_init_array+0x40>)
 8000332:	4c0c      	ldr	r4, [pc, #48]	; (8000364 <__libc_init_array+0x44>)
 8000334:	f000 f818 	bl	8000368 <_init>
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	10a4      	asrs	r4, r4, #2
 800033c:	2600      	movs	r6, #0
 800033e:	42a6      	cmp	r6, r4
 8000340:	d105      	bne.n	800034e <__libc_init_array+0x2e>
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f855 3b04 	ldr.w	r3, [r5], #4
 8000348:	4798      	blx	r3
 800034a:	3601      	adds	r6, #1
 800034c:	e7ee      	b.n	800032c <__libc_init_array+0xc>
 800034e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000352:	4798      	blx	r3
 8000354:	3601      	adds	r6, #1
 8000356:	e7f2      	b.n	800033e <__libc_init_array+0x1e>
 8000358:	08000380 	.word	0x08000380
 800035c:	08000380 	.word	0x08000380
 8000360:	08000380 	.word	0x08000380
 8000364:	08000384 	.word	0x08000384

08000368 <_init>:
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	bf00      	nop
 800036c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036e:	bc08      	pop	{r3}
 8000370:	469e      	mov	lr, r3
 8000372:	4770      	bx	lr

08000374 <_fini>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr
