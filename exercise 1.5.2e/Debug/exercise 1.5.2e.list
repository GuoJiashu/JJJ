
exercise 1.5.2e.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000208  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800039c  0800039c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800039c  0800039c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800039c  0800039c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800039c  0800039c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800039c  0800039c  0001039c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003a0  080003a0  000103a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080003a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          0000001c  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_line   0000013e  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000082  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  000202fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  00020328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00000083  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  000203f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  0002040c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000080 	.word	0x20000080
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000384 	.word	0x08000384

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000084 	.word	0x20000084
 80001d0:	08000384 	.word	0x08000384

080001d4 <enable_peripheral_clocks>:



enable_peripheral_clocks:

	LDR R0, =RCC
 80001d4:	483d      	ldr	r0, [pc, #244]	; (80002cc <transmit_loop+0x1a>)

	LDR R1, [R0, #AHBENR]
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE  @ enable GPIO
 80001d8:	f441 1178 	orr.w	r1, r1, #4063232	; 0x3e0000
	STR R1, [R0, #AHBENR]
 80001dc:	6141      	str	r1, [r0, #20]

	BX LR
 80001de:	4770      	bx	lr

080001e0 <enable_usart1>:

enable_usart1:

	LDR R0, =GPIOC
 80001e0:	483b      	ldr	r0, [pc, #236]	; (80002d0 <transmit_loop+0x1e>)

	LDR R1, =0x77
 80001e2:	f04f 0177 	mov.w	r1, #119	; 0x77
	STRB R1, [R0, AFRL + 2]
 80001e6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22

	LDR R1, [R0, GPIO_MODER]
 80001ea:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00
 80001ec:	f441 6120 	orr.w	r1, r1, #2560	; 0xa00
	STR R1, [R0, GPIO_MODER]
 80001f0:	6001      	str	r1, [r0, #0]

	LDR R1, [R0, GPIO_OSPEEDR]
 80001f2:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00
 80001f4:	f441 6170 	orr.w	r1, r1, #3840	; 0xf00
	STR R1, [R0, GPIO_OSPEEDR]
 80001f8:	6081      	str	r1, [r0, #8]

	LDR R0, =RCC
 80001fa:	4834      	ldr	r0, [pc, #208]	; (80002cc <transmit_loop+0x1a>)
	LDR R1, [R0, #APB2ENR]
 80001fc:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << USART1_EN
 80001fe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
	STR R1, [R0, #APB2ENR]
 8000202:	6181      	str	r1, [r0, #24]

	MOV R1, #0x46
 8000204:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =USART1
 8000208:	4832      	ldr	r0, [pc, #200]	; (80002d4 <transmit_loop+0x22>)
	STRH R1, [R0, #USART_BRR]
 800020a:	8181      	strh	r1, [r0, #12]

	LDR R0, =USART1
 800020c:	4831      	ldr	r0, [pc, #196]	; (80002d4 <transmit_loop+0x22>)
	LDR R1, [R0, #USART_CR1]
 800020e:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE
 8000210:	f041 010d 	orr.w	r1, r1, #13

	STR R1, [R0, #USART_CR1]
 8000214:	6001      	str	r1, [r0, #0]

	BX LR
 8000216:	4770      	bx	lr

08000218 <enable_uart4>:

enable_uart4:

	LDR R0, =GPIOC
 8000218:	482d      	ldr	r0, [pc, #180]	; (80002d0 <transmit_loop+0x1e>)

	LDR R1, =0x55
 800021a:	f04f 0155 	mov.w	r1, #85	; 0x55
	STRB R1, [R0, AFRH + 2]
 800021e:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26

	LDR R1, [R0, GPIO_MODER]
 8000222:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00
 8000224:	f441 6120 	orr.w	r1, r1, #2560	; 0xa00
	STR R1, [R0, GPIO_MODER]
 8000228:	6001      	str	r1, [r0, #0]

	LDR R1, [R0, GPIO_OSPEEDR]
 800022a:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00
 800022c:	f441 6170 	orr.w	r1, r1, #3840	; 0xf00
	STR R1, [R0, GPIO_OSPEEDR]
 8000230:	6081      	str	r1, [r0, #8]

	LDR R0, =RCC
 8000232:	4826      	ldr	r0, [pc, #152]	; (80002cc <transmit_loop+0x1a>)
	LDR R1, [R0, #APB1ENR]
 8000234:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << UART4_EN
 8000236:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
	STR R1, [R0, #APB1ENR]
 800023a:	61c1      	str	r1, [r0, #28]

	MOV R1, #0x46
 800023c:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =UART4
 8000240:	4825      	ldr	r0, [pc, #148]	; (80002d8 <transmit_loop+0x26>)
	STRH R1, [R0, #USART_BRR]
 8000242:	8181      	strh	r1, [r0, #12]

	LDR R0, =USART1
 8000244:	4823      	ldr	r0, [pc, #140]	; (80002d4 <transmit_loop+0x22>)
	LDR R1, [R0, #USART_CR1]
 8000246:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE
 8000248:	f041 010d 	orr.w	r1, r1, #13

	STR R1, [R0, #USART_CR1]
 800024c:	6001      	str	r1, [r0, #0]

	BX LR
 800024e:	4770      	bx	lr

08000250 <initialise_power>:

initialise_power:

	LDR R0, =RCC
 8000250:	481e      	ldr	r0, [pc, #120]	; (80002cc <transmit_loop+0x1a>)

	LDR R1, [R0, #APB1ENR]
 8000252:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN
 8000254:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
	STR R1, [R0, #APB1ENR]
 8000258:	61c1      	str	r1, [r0, #28]

	LDR R1, [R0, #APB2ENR]
 800025a:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN
 800025c:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 8000260:	6181      	str	r1, [r0, #24]

	BX LR
 8000262:	4770      	bx	lr

08000264 <main>:

.text

main:

    BL initialise_power                  @ Call function to initialize power
 8000264:	f7ff fff4 	bl	8000250 <initialise_power>
    BL enable_peripheral_clocks          @ Call function to enable peripheral clocks
 8000268:	f7ff ffb4 	bl	80001d4 <enable_peripheral_clocks>
    BL enable_usart1                     @ Call function to enable UART communication
 800026c:	f7ff ffb8 	bl	80001e0 <enable_usart1>

    LDR R6, =incoming_buffer             @ Load the address of the incoming buffer into R6
 8000270:	4e1a      	ldr	r6, [pc, #104]	; (80002dc <transmit_loop+0x2a>)
    LDR R7, =incoming_counter            @ Load the address of the incoming counter into R7
 8000272:	4f1b      	ldr	r7, [pc, #108]	; (80002e0 <transmit_loop+0x2e>)

    LDRB R7, [R7]                        @ Load the value of incoming_counter into R7
 8000274:	783f      	ldrb	r7, [r7, #0]

    MOV R8, #0x00                        @ Initialize R8 to 0
 8000276:	f04f 0800 	mov.w	r8, #0

	LDR R0, =USART1                      @ Load the base address of USART1 into R0
 800027a:	4816      	ldr	r0, [pc, #88]	; (80002d4 <transmit_loop+0x22>)
	LDR R4, =terminating_char            @ Load the address of the terminating character into R4
 800027c:	4c19      	ldr	r4, [pc, #100]	; (80002e4 <transmit_loop+0x32>)
	LDRB R4,[R4]                         @ Load the terminating character into R4
 800027e:	7824      	ldrb	r4, [r4, #0]

    BL receive_loop                      @ Branch to the receive_loop function
 8000280:	f000 f800 	bl	8000284 <receive_loop>

08000284 <receive_loop>:

receive_loop:

    LDR R1, [R0, USART_ISR]              @ Load the USART_ISR register into R1
 8000284:	69c1      	ldr	r1, [r0, #28]

    TST R1, 1 << UART_ORE | 1 << UART_FE @ Test for UART overrun error (ORE) and framing error (FE)
 8000286:	f011 0f0a 	tst.w	r1, #10

    BNE clear_error                      @ Branch if either error is detected
 800028a:	d10a      	bne.n	80002a2 <clear_error>

    TST R1, 1 << UART_RXNE               @ Test for RXNE (Receive Data Register Not Empty) flag
 800028c:	f011 0f20 	tst.w	r1, #32

    BEQ receive_loop                     @ If RXNE is not set, branch back to receive_loop
 8000290:	d0f8      	beq.n	8000284 <receive_loop>

    LDRB R3, [R0, USART_RDR]             @ Load received data from USART_RDR into R3
 8000292:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24

    STRB R3, [R6, R8]                    @ Store received byte into incoming_buffer at offset R8
 8000296:	f806 3008 	strb.w	r3, [r6, r8]

    ADD R8, #1                           @ Increment R8 to point to the next position in the buffer
 800029a:	f108 0801 	add.w	r8, r8, #1

    CMP R3, R4                           @ Compare received byte with terminating character
 800029e:	42a3      	cmp	r3, r4

    BEQ transmit_string                  @ If received byte equals terminating character, branch to transmit_string
 80002a0:	d004      	beq.n	80002ac <transmit_string>

080002a2 <clear_error>:

clear_error:

    LDR R1, [R0, USART_ICR]              @ Load the USART_ICR register into R1
 80002a2:	6a01      	ldr	r1, [r0, #32]
    ORR R1, 1 << UART_ORECF | 1 << UART_FECF @ Set the overrun error clear flag and framing error clear flag
 80002a4:	f041 0108 	orr.w	r1, r1, #8
    STR R1, [R0, USART_ICR]              @ Store the modified value back to USART_ICR
 80002a8:	6201      	str	r1, [r0, #32]
    B receive_loop                       @ Branch back to receive_loop
 80002aa:	e7eb      	b.n	8000284 <receive_loop>

080002ac <transmit_string>:

transmit_string:

    BL enable_uart4                       @ Call function to enable UART communication
 80002ac:	f7ff ffb4 	bl	8000218 <enable_uart4>
    LDR R0, =UART4                      @ Load the base address of USART1 into R0
 80002b0:	4809      	ldr	r0, [pc, #36]	; (80002d8 <transmit_loop+0x26>)

080002b2 <transmit_loop>:

transmit_loop:

    LDR R1, [R0, USART_ISR]              @ Load the USART_ISR register into R1
 80002b2:	69c1      	ldr	r1, [r0, #28]

    TST R1, 1 << UART_TXE                @ Test for TXE (Transmit Data Register Empty) flag
 80002b4:	f011 0f80 	tst.w	r1, #128	; 0x80
    BEQ transmit_loop                    @ If TXE is not set, branch back to transmit_loop
 80002b8:	d0fb      	beq.n	80002b2 <transmit_loop>

    LDRB R5, [R6], #1                    @ Load a byte from the tx_string buffer and increment the buffer pointer
 80002ba:	f816 5b01 	ldrb.w	r5, [r6], #1

    STRB R5, [R0, USART_TDR]             @ Transmit the loaded byte via USART_TDR
 80002be:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28

    CMP R5, R4                           @ Compare transmitted byte with terminating character
 80002c2:	42a5      	cmp	r5, r4

    BNE transmit_loop                    @ If transmitted byte is not the terminating character, branch back to transmit_loop
 80002c4:	d1f5      	bne.n	80002b2 <transmit_loop>

	B receive_loop                       @ Branch back to receive_loop
 80002c6:	e7dd      	b.n	8000284 <receive_loop>
    BX LR                                 @ Return from main function
 80002c8:	4770      	bx	lr
 80002ca:	0000      	.short	0x0000
	LDR R0, =RCC
 80002cc:	40021000 	.word	0x40021000
	LDR R0, =GPIOC
 80002d0:	48000800 	.word	0x48000800
	LDR R0, =USART1
 80002d4:	40013800 	.word	0x40013800
	LDR R0, =UART4
 80002d8:	40004c00 	.word	0x40004c00
    LDR R6, =incoming_buffer             @ Load the address of the incoming buffer into R6
 80002dc:	20000000 	.word	0x20000000
    LDR R7, =incoming_counter            @ Load the address of the incoming counter into R7
 80002e0:	2000003e 	.word	0x2000003e
	LDR R4, =terminating_char            @ Load the address of the terminating character into R4
 80002e4:	2000003f 	.word	0x2000003f

080002e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e8:	480d      	ldr	r0, [pc, #52]	; (8000320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f0:	480c      	ldr	r0, [pc, #48]	; (8000324 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f2:	490d      	ldr	r1, [pc, #52]	; (8000328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f4:	4a0d      	ldr	r2, [pc, #52]	; (800032c <LoopForever+0xe>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000308:	4c0a      	ldr	r4, [pc, #40]	; (8000334 <LoopForever+0x16>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000316:	f000 f811 	bl	800033c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031a:	f7ff ffa3 	bl	8000264 <main>

0800031e <LoopForever>:

LoopForever:
  b LoopForever
 800031e:	e7fe      	b.n	800031e <LoopForever>
  ldr   r0, =_estack
 8000320:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800032c:	080003a4 	.word	0x080003a4
  ldr r2, =_sbss
 8000330:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000334:	2000009c 	.word	0x2000009c

08000338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC1_2_IRQHandler>
	...

0800033c <__libc_init_array>:
 800033c:	b570      	push	{r4, r5, r6, lr}
 800033e:	4d0d      	ldr	r5, [pc, #52]	; (8000374 <__libc_init_array+0x38>)
 8000340:	4c0d      	ldr	r4, [pc, #52]	; (8000378 <__libc_init_array+0x3c>)
 8000342:	1b64      	subs	r4, r4, r5
 8000344:	10a4      	asrs	r4, r4, #2
 8000346:	2600      	movs	r6, #0
 8000348:	42a6      	cmp	r6, r4
 800034a:	d109      	bne.n	8000360 <__libc_init_array+0x24>
 800034c:	4d0b      	ldr	r5, [pc, #44]	; (800037c <__libc_init_array+0x40>)
 800034e:	4c0c      	ldr	r4, [pc, #48]	; (8000380 <__libc_init_array+0x44>)
 8000350:	f000 f818 	bl	8000384 <_init>
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	10a4      	asrs	r4, r4, #2
 8000358:	2600      	movs	r6, #0
 800035a:	42a6      	cmp	r6, r4
 800035c:	d105      	bne.n	800036a <__libc_init_array+0x2e>
 800035e:	bd70      	pop	{r4, r5, r6, pc}
 8000360:	f855 3b04 	ldr.w	r3, [r5], #4
 8000364:	4798      	blx	r3
 8000366:	3601      	adds	r6, #1
 8000368:	e7ee      	b.n	8000348 <__libc_init_array+0xc>
 800036a:	f855 3b04 	ldr.w	r3, [r5], #4
 800036e:	4798      	blx	r3
 8000370:	3601      	adds	r6, #1
 8000372:	e7f2      	b.n	800035a <__libc_init_array+0x1e>
 8000374:	0800039c 	.word	0x0800039c
 8000378:	0800039c 	.word	0x0800039c
 800037c:	0800039c 	.word	0x0800039c
 8000380:	080003a0 	.word	0x080003a0

08000384 <_init>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr

08000390 <_fini>:
 8000390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000392:	bf00      	nop
 8000394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000396:	bc08      	pop	{r3}
 8000398:	469e      	mov	lr, r3
 800039a:	4770      	bx	lr
