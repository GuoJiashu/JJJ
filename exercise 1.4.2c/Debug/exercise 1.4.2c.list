
exercise 1.4.2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000016c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000300  08000308  00010308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000300  08000300  00010308  2**0
                  CONTENTS
  4 .ARM          00000000  08000300  08000300  00010308  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000300  08000308  00010308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000300  08000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000304  08000304  00010304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010308  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010308  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010338  2**0
                  CONTENTS, READONLY
 14 .debug_line   00000507  00000000  00000000  0001037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000086  00000000  00000000  00010882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   000000ef  00000000  00000000  00010908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000009a  00000000  00000000  000109f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000068  00000000  00000000  00010a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003be9  00000000  00000000  00010b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 0000002c  00000000  00000000  000146e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00000f64  00000000  00000000  00014715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00000058  00000000  00000000  0001567c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002e8 	.word	0x080002e8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080002e8 	.word	0x080002e8

080001d4 <enable_peripheral_clocks>:

#include "definitions.s"

@ enable the clocks for peripherals (GPIOA, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	4818      	ldr	r0, [pc, #96]	; (8000238 <not_finished_yet+0x6>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE  @ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f441 1128 	orr.w	r1, r1, #2752512	; 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 80001dc:	6141      	str	r1, [r0, #20]
	BX LR @ return from function call
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:



@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e0:	4816      	ldr	r0, [pc, #88]	; (800023c <not_finished_yet+0xa>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001e2:	f245 5155 	movw	r1, #21845	; 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001e6:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001e8:	4770      	bx	lr

080001ea <main_func>:

@ this is the entry function called from the startup file
main_func:

	@ Branch with link to set the clocks for the I/O and UART
	BL enable_peripheral_clocks
 80001ea:	f7ff fff3 	bl	80001d4 <enable_peripheral_clocks>

	@ Once the clocks are started, need to initialise the discovery board I/O
	BL initialise_discovery_board
 80001ee:	f7ff fff7 	bl	80001e0 <initialise_discovery_board>

080001f2 <program_loop>:


@ 	Look at the GPIOA offset IDR, display as hex, then as binary. Look at the manual page 239

@	task: read in the input button !
	LDR R0, =GPIOA	@ port for the input button
 80001f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	LDRB R1, [R0, #IDR]
 80001f6:	7c01      	ldrb	r1, [r0, #16]

	CMP R1, #255
 80001f8:	29ff      	cmp	r1, #255	; 0xff
	BEQ LED_2
 80001fa:	d00c      	beq.n	8000216 <LED_2>
	@ If you run the code, the LEDs will blink too fast, so fast you cannot tell they
	@ are turning off and on. Uncomment the next line to make a delay


@BL delay_function
	B program_loop @ return to the program_loop label
 80001fc:	e7f9      	b.n	80001f2 <program_loop>

080001fe <LED>:
LED:
LDR R0, =GPIOE  @ load the address of the GPIOE register into R0
 80001fe:	480f      	ldr	r0, [pc, #60]	; (800023c <not_finished_yet+0xa>)
	STRB R4, [R0, #ODR + 1]   @ store this to the second byte of the ODR (bits 8-15)
 8000200:	7544      	strb	r4, [r0, #21]
	@BL delay_function
	LDR R4, =0b00000000
 8000202:	f04f 0400 	mov.w	r4, #0
	@LSL R4,R4,#1@EOR R4, #0xFF	@ toggle all of the bits in the byte (1->0 0->1)

@ADD R4,R4,#254

BL delay_function
 8000206:	f000 f812 	bl	800022e <delay_function>
@CMP R4,0b00000000
@BEQ main_func
LDR R0, =GPIOA	@ port for the input button
 800020a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	LDRB R1, [R0, #IDR]
 800020e:	7c01      	ldrb	r1, [r0, #16]
CMP R1, #255
 8000210:	29ff      	cmp	r1, #255	; 0xff
	BEQ LED_2
 8000212:	d000      	beq.n	8000216 <LED_2>


B program_loop
 8000214:	e7ed      	b.n	80001f2 <program_loop>

08000216 <LED_2>:

LED_2:
LDR R0, =GPIOE  @ load the address of the GPIOE register into R0
 8000216:	4809      	ldr	r0, [pc, #36]	; (800023c <not_finished_yet+0xa>)
	STRB R4, [R0, #ODR + 1]   @ store this to the second byte of the ODR (bits 8-15)
 8000218:	7544      	strb	r4, [r0, #21]
	@BL delay_function
	LDR R4, =0b11111111
 800021a:	f04f 04ff 	mov.w	r4, #255	; 0xff
	@LSL R4,R4,#1@EOR R4, #0xFF	@ toggle all of the bits in the byte (1->0 0->1)

@ADD R4,R4,#254

BL delay_function
 800021e:	f000 f806 	bl	800022e <delay_function>
@CMP R4,0b11111111
@BEQ main_func
LDR R0, =GPIOA	@ port for the input button
 8000222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	LDRB R1, [R0, #IDR]
 8000226:	7c01      	ldrb	r1, [r0, #16]
CMP R1, #255
 8000228:	29ff      	cmp	r1, #255	; 0xff
	BEQ LED
 800022a:	d0e8      	beq.n	80001fe <LED>

B program_loop
 800022c:	e7e1      	b.n	80001f2 <program_loop>

0800022e <delay_function>:


@ think about how you could make a delay such that the LEDs blink at a certain frequency
delay_function:
	MOV R6, #0x0100000
 800022e:	f44f 1680 	mov.w	r6, #1048576	; 0x100000

08000232 <not_finished_yet>:

	@ we continue to subtract one from R6 while the result is not zero,
	@ then return to where the delay_function was called
not_finished_yet:
	SUBS R6, 0x01
 8000232:	3e01      	subs	r6, #1
	BNE not_finished_yet
 8000234:	d1fd      	bne.n	8000232 <not_finished_yet>

	BX LR @ return from function call
 8000236:	4770      	bx	lr
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 8000238:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 800023c:	48001000 	.word	0x48001000

08000240 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	main_func ();/* Loop forever */
 8000244:	f7ff ffd1 	bl	80001ea <main_func>
	for(;;);
 8000248:	e7fe      	b.n	8000248 <main+0x8>
	...

0800024c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800024c:	480d      	ldr	r0, [pc, #52]	; (8000284 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800024e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000250:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000254:	480c      	ldr	r0, [pc, #48]	; (8000288 <LoopForever+0x6>)
  ldr r1, =_edata
 8000256:	490d      	ldr	r1, [pc, #52]	; (800028c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000258:	4a0d      	ldr	r2, [pc, #52]	; (8000290 <LoopForever+0xe>)
  movs r3, #0
 800025a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800025c:	e002      	b.n	8000264 <LoopCopyDataInit>

0800025e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800025e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000262:	3304      	adds	r3, #4

08000264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000268:	d3f9      	bcc.n	800025e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026a:	4a0a      	ldr	r2, [pc, #40]	; (8000294 <LoopForever+0x12>)
  ldr r4, =_ebss
 800026c:	4c0a      	ldr	r4, [pc, #40]	; (8000298 <LoopForever+0x16>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000270:	e001      	b.n	8000276 <LoopFillZerobss>

08000272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000274:	3204      	adds	r2, #4

08000276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000278:	d3fb      	bcc.n	8000272 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800027a:	f000 f811 	bl	80002a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800027e:	f7ff ffdf 	bl	8000240 <main>

08000282 <LoopForever>:

LoopForever:
  b LoopForever
 8000282:	e7fe      	b.n	8000282 <LoopForever>
  ldr   r0, =_estack
 8000284:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800028c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000290:	08000308 	.word	0x08000308
  ldr r2, =_sbss
 8000294:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000298:	2000001c 	.word	0x2000001c

0800029c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800029c:	e7fe      	b.n	800029c <ADC1_2_IRQHandler>
	...

080002a0 <__libc_init_array>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	4d0d      	ldr	r5, [pc, #52]	; (80002d8 <__libc_init_array+0x38>)
 80002a4:	4c0d      	ldr	r4, [pc, #52]	; (80002dc <__libc_init_array+0x3c>)
 80002a6:	1b64      	subs	r4, r4, r5
 80002a8:	10a4      	asrs	r4, r4, #2
 80002aa:	2600      	movs	r6, #0
 80002ac:	42a6      	cmp	r6, r4
 80002ae:	d109      	bne.n	80002c4 <__libc_init_array+0x24>
 80002b0:	4d0b      	ldr	r5, [pc, #44]	; (80002e0 <__libc_init_array+0x40>)
 80002b2:	4c0c      	ldr	r4, [pc, #48]	; (80002e4 <__libc_init_array+0x44>)
 80002b4:	f000 f818 	bl	80002e8 <_init>
 80002b8:	1b64      	subs	r4, r4, r5
 80002ba:	10a4      	asrs	r4, r4, #2
 80002bc:	2600      	movs	r6, #0
 80002be:	42a6      	cmp	r6, r4
 80002c0:	d105      	bne.n	80002ce <__libc_init_array+0x2e>
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c8:	4798      	blx	r3
 80002ca:	3601      	adds	r6, #1
 80002cc:	e7ee      	b.n	80002ac <__libc_init_array+0xc>
 80002ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d2:	4798      	blx	r3
 80002d4:	3601      	adds	r6, #1
 80002d6:	e7f2      	b.n	80002be <__libc_init_array+0x1e>
 80002d8:	08000300 	.word	0x08000300
 80002dc:	08000300 	.word	0x08000300
 80002e0:	08000300 	.word	0x08000300
 80002e4:	08000304 	.word	0x08000304

080002e8 <_init>:
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ea:	bf00      	nop
 80002ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ee:	bc08      	pop	{r3}
 80002f0:	469e      	mov	lr, r3
 80002f2:	4770      	bx	lr

080002f4 <_fini>:
 80002f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f6:	bf00      	nop
 80002f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fa:	bc08      	pop	{r3}
 80002fc:	469e      	mov	lr, r3
 80002fe:	4770      	bx	lr
